基礎練習:

1.查詢指令: 寫一個 SQL 查詢，選擇 Students 表的所有欄位。

SELECT * FROM `students`;

2.Where 子句: 寫一個 SQL 查詢，找出 Students 表中 'status_code' 等於 1 的所有學生。

SELECT * FROM `students` WHERE `status_code`=001;

3.連接查詢: 寫一個 SQL 查詢，連接 Students 表和 Dept 表，選擇學生的名字和他們所屬的部門名稱。

SELECT `students`.`name`,`dept`.`name` FROM `students`,`dept`;

4.聚合函數: 寫一個 SQL 查詢，找出 Student_Scores 表中的平均分數。

SELECT avg(score) FROM `students_scores`;

avg(score)
73.5637

5.Group By: 寫一個 SQL 查詢，計算每個部門的學生數量（使用 Dept 和 Students 表）。

SELECT count(*) as 學生人數,`dept`.`name`as'科別名稱'
FROM `students`, `dept` 
WHERE `students`.`dept`=`dept`.`id`
GROUP BY `dept`


6.Order By: 寫一個 SQL 查詢，選擇 Students 表中的所有學生，並按照他們的 name 以升序排列。

7.插入指令: 寫一個 SQL 查詢，向 Students 表中插入一名新學生。

INSERT INTO `students`(school_num,name,birthday,uni_id,addr,parents,tel,dept,graduate_at,status_code)
VALUES ('912345','王小美','1992-07-12','H123456789','桃園市中壢區平安街快樂號','陳大春','04-1234567','5','17','002')

8.更新指令: 寫一個 SQL 查詢，更新 Students 表中某個學生的 tel 號碼。

9.刪除指令: 寫一個 SQL 查詢，刪除 Students 表中 id 為特定值的學生。

10.子查詢: 寫一個 SQL 查詢，選擇所有在 Student_Scores 表中分數高於平均分的學生。


進階練習:

1.複雜聯接查詢: 寫一個 SQL 查詢，連接 Students 表、Dept 表和 Class_Student 表，選擇學生的名字、所屬部門名稱以及他們所修課程的代碼。

2.多表結合與聚合: 寫一個 SQL 查詢，連接 Students 表和 Student_Scores 表，並對每位學生的平均分數進行分組，顯示學生姓名和他們的平均分數。

3.帶有子查詢的聯接: 寫一個 SQL 查詢，從 Students 表中選擇所有學生的姓名，並連接一個子查詢，該子查詢從 Student_Scores 表中找出這些學生的最高分數。

4.使用子查詢的過濾: 寫一個 SQL 查詢，在 Students 表中選擇所有學生，但只包括那些在 Student_Scores 表中至少有一個分數超過 80 分的學生。

5.複雜子查詢: 寫一個 SQL 查詢，從 Students 表中選擇所有學生，其 status_code 對應於 Status 表中 'status' 為 '畢業' 的學生，並確保這些學生在 Class_Student 表中至少有一門課。